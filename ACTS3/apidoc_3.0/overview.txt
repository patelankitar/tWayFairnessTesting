Overview of the API interface

This API interface is intended to include the most commonly used
features of ACTS so that ACTS can be seamlessly integrated into a test
environment.  More advanced features will be included in future
releases, based on user feedback.

This API interface is simplified to consist of 10 classes for easy of use.
These classes can be divided into the following groups:

(1) Group 1: This group consists of classes SUT, Parameter, Relation,
and Constraints.  These classes are used to define the input parameter
model of the system under test (SUT).

(2) Group 2: This group consists of class TestGenProfile and enums
such as TestGenProfile.Mode.  These class and enums are used to set up 
some runtime options of the test generation engine.

(3) Group 3: This group consists of classes IPOEngine and 
CoverageChecker.  Class IPOEngine is a test generation engine that 
implements the IPO serial algorithms like IPOG (default) and IPOF. 
Other test generation engines will be included in the API interface 
in future releases and upon user requests.  Class CoverageChecker 
can be used to check whether a test set satisfies t-way coverage, 
and it supports relations and constraints.

(4) Group 4: This group consists of classes TestSet and
TestSetWrapper.  Class TestSet represents a test set generated by a
test generation engine or imported from a file.  Class TestSetWrapper
provides convenience methods that perform some operations on a test
set.

(5) Group 5: This group consists of class OperationServiceException.
This exception is used by the backend to communicate an error
condition to the front end.

The usage of this API is relatively straightforward.  Two example
programs that use this API are included in the examples directory.
The users are recommended to consult the two examples prior to the use
of this API in their programs.
 


How To Compile:

(1) If using an IDE like Eclipse, add ACTS jar into the build path 
of your project.

(2) If using command line (javac), add ACTS jar into the class path:
javac -cp acts.jar example.java 
(Replace "acts.jar" with the actual path of your ACTS jar file)


How to Execute:

(1) If using an IDE and ACTS jar is correctly added into your project, 
you can simply run you program in the IDE or export it as a standalone jar.

(2) If using command line (java), add ACTS jar into the class path:
java -cp acts.jar example
(Replace "acts.jar" with the actual path of your ACTS jar file)




